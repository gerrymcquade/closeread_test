---
title: "Testing out the closeread extension!"
format: 
  closeread-html:
    remove-header-space: true
    css: https://cdn.knightlab.com/libs/juxtapose/latest/css/juxtapose.css
    cr-style:
      narrative-background-color-overlay: "#211545"
      narrative-text-color-overlay: "white"
      narrative-background-color-sidebar: "white"
      section-background-color: "white"
title-block-banner: "#211545"
title-block-banner-color: "white"
lightbox: 
  match: auto
---

```{ojs}
//| output: false
require("https://cdn.jsdelivr.net/npm/juxtaposejs@1.1.6/build/js/juxtapose.min.js")
  .catch(() => null)
```

# Basic tests

Below is my first practice with trying out closeread, hopefully it gives us an idea of what we can do with.

:::::::: cr-section
Closeread enables scrollytelling.

Draw your readers attention with focus effects. @cr-features

::: {#cr-features}
1.  Highlighting
2.  Zooming
3.  Panning
:::

an easy use of this is to display text next to an image (like this random photo pulled from unsplash!): @cr-fig1

::: {#cr-fig1}
![](amber-kipp-75715CVEJhI-unsplash.jpg)

Image by [Amber Kipp](https://unsplash.com/photos/selective-focus-photography-of-orange-and-white-cat-on-brown-table-75715CVEJhI) on Unsplash
:::

::: {focus-on="cr-fig2"}
this might be useful to show change over time:

For example, here is the graph we have of annual average PM2.5 air pollution in Ethiopia in 1998...
:::

::: {#cr-fig2 .scale-to-fill}
![](eth_pm25_1998.svg){fig-align="center" layout-valign="center"}
:::

compared with air pollution in 2022! Look at the difference! @cr-fig3

::: {#cr-fig3 .scale-to-fill}
![](eth_pm25_2022.svg){fig-align="center" layout-valign="center"}
:::

we can even zoom in to look at some of our communities... for example around Addis Ababa: @cr-fig3

or even look at the difference across our communities by panning up towards Tigray! @cr-fig3
::::::::

I can split up sections of scrollytelling using normal text, figures, tables and graphs:

{{< lipsum 1 >}}

# Juxtaposing images

I have even tried out using a bit of Javascript to give a juxtapose of 2 images, which lets you use the slider to compare across time, give it a try below!

::: {.juxtapose data-startingposition="20%" style="margin-bottom:2em"}
![](eth_pm25_2022.svg){width="50%" data-credit="Young Lives, using V6.GL.02, Washington University St. Louis" data-label="PM2.5 in 2022"}

![](eth_pm25_1998.svg){width="50%\"" data-label="PM2.5 in 1998"}
:::

Hopefully it works! Testing it a bit however it seems the juxtapose.js doesn't work inside the scrollytelling sections...ðŸ˜­

::::: {.cr-section layout="sidebar-right"}
::: {focus-on="cr-fig4"}
The text can be moved around, we can set it to layout on the right side of the sticky item
:::

::: {#cr-fig4 .scale-to-fill}
![](pm25_levels.svg)
:::
:::::

:::: {.cr-section layout="overlay-right"}
::: {#cr-fig5 .scale-to-fill}
![](pm25_levels.svg)
:::

Or we can have it overlay the image/item, aligned to the right @cr-fig5
::::

:::: {.cr-section layout="overlay-center"}
::: {#cr-fig6 .scale-to-fill}
![](pm25_levels.svg)
:::

Or over the top of the item... @cr-fig6
::::

# Exectuable code

So far I have used images that are pre-rendered, but as I am typing this using Quarto markdown in R, I can display the output of code executed in R (and python, Julia, Observable, etc)

:::::: cr-section
::: {#cr-myplot}
```{r}
hist(rnorm(15))
```
:::

::: {focus-on="cr-myplot"}
Here is a simple graph made using this code:

```{r}
#| eval: false
#| echo: true
hist(rnorm(15))
```
:::

and here is a table: @cr-table

::: {#cr-table}
```{r}
data(mtcars)
knitr::kable(mtcars[1:5, ], )
```
:::
::::::

# Simple gallery with descriptions

We could even have an small gallery with photos that you can click on to have a closer look and read a description:

::: {layout-ncol="4"}
![Doggy](https://fastly.picsum.photos/id/237/200/200.jpg?hmac=zHUGikXUDyLCCmvyww1izLK3R3k8oRYBRiTizZEdyfI){group="gallery_1" description="blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"}

![Oxford?](https://fastly.picsum.photos/id/193/200/200.jpg?hmac=JHo5tWHSRWvVbL3HX6rwDNdkvYPFojLtXkEGEUCgz6A){group="gallery_1" description="blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"}

![Deer](https://fastly.picsum.photos/id/1003/200/200.jpg?hmac=w2SN03yog7_RB-IfnyWX1FtBjSHebnoWD35Lj4-iV7o){group="gallery_1" description="blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"}

![Waves](https://fastly.picsum.photos/id/846/200/200.jpg?hmac=sBOPnyp2w5gN9cwTnXUuQ528aG4bLJ2qf_d-3y-LjSo){group="gallery_1" description="blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"}
:::

# Value boxes

I like the style of valueboxes from htmlwidget dashboards, but these are not available outside of the `dashboard` format, so want to try to see if I can make one for a basic html document using the `bslib` package in R:

```{r}
#| echo: false
#| warning: false
#| message: false
library(bslib)
library(bsicons)
library(htmltools)

box1 <- bslib::value_box(
    title = "Interviewing",
    value = "12,000",
    showcase = bsicons::bs_icon("bar-chart"),
    theme = "purple",
    p('children and their families')
  )
box2 <- bslib::value_box(
    title = "Covering",
    value = "20+ years",
    showcase = bsicons::bs_icon("graph-up"),
    theme = "red",
    p('of data collection')
  )
box3 <- bslib::value_box(
    title = "Across",
    value = "4",
    showcase = bsicons::bs_icon("pie-chart"),
    theme = "teal",
    p('countries in the Global South')
  )

layout_column_wrap(width = 1/3, 
                   box1, box2, box3)
```

Unfortunately these don't seem to show up in the scrollytelling sections.

Next up, I want to try including interactive maps! so check back soon...
